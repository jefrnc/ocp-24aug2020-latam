// This is a Declarative Jenkinsfile to be used in the homework
// It should map very well to what you learned in class.
// Implement the sections marked with "TBD:"


def GUID = "cec5"

pipeline {
  agent {
    kubernetes {
      label "maven-skopeo-agent"
      cloud "openshift"
      inheritFrom "maven"
      containerTemplate {
        name "jnlp"
        image "image-registry.openshift-image-registry.svc:5000/${GUID}-jenkins/jenkins-agent-appdev:latest"
        resourceRequestMemory "2Gi"
        resourceLimitMemory "2Gi"
        resourceRequestCpu "2"
        resourceLimitCpu "2"
      }
    }
  }
  environment { 
    // Define global variables
    // Set Maven command to always include Nexus Settings
    // NOTE: Somehow an inline pod template in a declarative pipeline
    //       needs the "scl_enable" before calling maven.
    mvnCmd = "source /usr/local/bin/scl_enable && mvn -s ./nexus_settings.xml"

    // Images and Projects
    imageName   = "${GUID}-tasks"
    devProject  = "${GUID}-tasks-dev"
    prodProject = "${GUID}-tasks-prod"

    // Tags
    devTag      = "0.0-0"
    prodTag     = "0.0"
    
    // Blue-Green Settings
    destApp     = "tasks-green"
    activeApp   = ""
  }
  stages {
    // Checkout Source Code.
    stage('Checkout Source') {
      steps {
        checkout scm

        dir('openshift-tasks') {
          script {
            def pom = readMavenPom file: 'pom.xml'
            def version = pom.version
            
            // Set the tag for the development image: version + build number
            devTag  = "${version}-" + currentBuild.number
            // Set the tag for the production image: version
            prodTag = "${version}"

            // Patch Source artifactId to include GUID
            sh "sed -i 's/GUID/${GUID}/g' ./pom.xml"
          }
        }
      }
    }

    // Build the Tasks Application in the directory 'openshift-tasks'
    stage('Build war') {
      steps {
        dir('openshift-tasks') {
          echo "Building version ${devTag}"
          script {

            sh "${mvnCmd} clean package -DskipTests=true"

          }
        }
      }
    }

    // Using Maven run the unit tests
    stage('Unit Tests') {
      steps {
        dir('openshift-tasks') {
          echo "Running Unit Tests"
          sh "${mvnCmd} test"

        }
      }
    }
    // Using Maven call SonarQube for Code Analysis
    stage('Code Analysis') {
      steps {
        dir('openshift-tasks') {
          script {
            echo "Running Code Analysis"
            sh "${mvnCmd} sonar:sonar \
                          -Dsonar.host.url=http://homework-sonarqube.apps.shared-na4.na4.openshift.opentlc.com/ \
                          -Dsonar.projectName=${GUID}-${JOB_BASE_NAME}-${devTag} \
                          -Dsonar.projectVersion=${devTag}"

          }
        }
      }
    }
    // Publish the built war file to Nexus
    stage('Publish to Nexus') {
      steps {
        dir('openshift-tasks') {
          echo "Publish to Nexus"
          sh "${mvnCmd} deploy \
                        -DskipTests=true \
                        -DaltDeploymentRepository=nexus::default::http://homework-nexus.gpte-hw-cicd.svc.cluster.local:8081/repository/releases" 

        }
      }
    }
    // Build the OpenShift Image in OpenShift and tag it.
    stage('Build and Tag OpenShift Image') {
      steps {
        dir('openshift-tasks') {
          echo "Building OpenShift container image ${imageName}:${devTag} in project ${devProject}."
          script {
            openshift.withCluster() {
              openshift.withProject("${devProject}") {                
                //openshift.selector("bc", "tasks").startBuild("--from-file=./target/openshift-tasks.war", "--wait=true")
                sh "oc start-build tasks --follow --from-file=./target/openshift-tasks.war -n ${GUID}-tasks-dev"
                openshift.tag("${imageName}:latest", "${imageName}:${devTag}")
              }
            }
          }
        }
      }
    }

    // Deploy the built image to the Development Environment.
    stage('Deploy to Dev') {
      steps {
        dir('openshift-tasks') {
          echo "Deploying container image to Development Project"
          script {
            openshift.withCluster() {        
              openshift.withProject("${devProject}") {
                 
                openshift.set("image", "dc/tasks", "tasks=image-registry.openshift-image-registry.svc:5000/${devProject}/${imageName}:${devTag}") // Actualizar la imagen en la configuración de implementación de desarrollo

                openshift.selector('configmap', 'tasks-config').delete() //Borramos
                def configmap = openshift.create('configmap', 'tasks-config', '--from-file=./configuration/application-users.properties', '--from-file=./configuration/application-roles.properties') //Actualice los mapas de configuración con los archivos de propiedades potencialmente modificados

                openshift.selector("dc", "tasks").rollout().latest(); //Vuelva a implementar la implementación de desarrollo

                // Espere hasta que se ejecute la implementación
 
  
                def otaskdc = openshift.selector("dc", "tasks").object()
                def latestDeploymentVersion = otaskdc.status.latestVersion
                def rc = openshift.selector('rc', "tasks-${latestDeploymentVersion}")
                echo "Waiting for tasks-${latestDeploymentVersion} to be ready"
                rc.untilEach(1){
                  sleep 30
                  def rcMap = it.object()
                  return (rcMap.status.replicas.equals(rcMap.status.readyReplicas))
                }


              }
            }
          }
        }
      }
    }    

    // Copy Image to Nexus Container Registry
    stage('Copy Image to Nexus Container Registry') {
      steps {
        echo "Copy image to Nexus Container Registry"
        script {
          sh "skopeo copy --src-tls-verify=false \
                          --dest-tls-verify=false \
                          --src-creds openshift:\$(oc whoami -t) \
                          --dest-creds admin:redhat docker://image-registry.openshift-image-registry.svc:5000/${devProject}/${imageName}:${devTag} docker://homework-nexus-registry.gpte-hw-cicd.svc.cluster.local:5000/${imageName}:${devTag}"

          // Creamos el tag
          openshift.withCluster() {
            openshift.withProject("${prodProject}") {
              openshift.tag("${devProject}/${imageName}:${devTag}", "${devProject}/${imageName}:${prodTag}")
            }
          }
        }
      }
    }

    // Blue/Green Deployment into Production
    // -------------------------------------
    stage('Blue/Green Production Deployment') {
      steps {
        echo "Blue/Green Production Deployment"
        script {
          openshift.withCluster() {
            openshift.withProject("${prodProject}") {
              activeApp = openshift.selector("route", "tasks").object().spec.to.name
              if (activeApp == "tasks-green") {
                destApp = "tasks-blue"
              }
              echo "Active Application:      " + activeApp
              echo "Destination Application: " + destApp

              def dc = openshift.selector("dc/${destApp}").object() //Actualizar la imagen en la configuración de implementación de producción
              dc.spec.template.spec.containers[0].image="image-registry.openshift-image-registry.svc:5000/${devProject}/${GUID}-tasks:${prodTag}"

               
              openshift.apply(dc) //Aplicamos el cambio

              openshift.selector('configmap', "${destApp}-config").delete() //Actualizamos el ConfigMap
              def configmap = openshift.create("configmap", "${destApp}-config", "--from-file=./openshift-tasks/configuration/application-users.properties", "--from-file=./openshift-tasks/configuration/application-roles.properties")

              openshift.selector("dc", "${destApp}").rollout().latest();


              def otaskdc = openshift.selector("dc", "${destApp}").object()
              def latestDeploymentVersion = otaskdc.status.latestVersion
              def rc = openshift.selector('rc', "${destApp}-${latestDeploymentVersion}")
              echo "Waiting for ${destApp}-${latestDeploymentVersion} to be ready"
              rc.untilEach(1){
                  sleep 30
                  def rcMap = it.object()
                  return (rcMap.status.replicas.equals(rcMap.status.readyReplicas))
              }


            }
          }
        }
      }
    }

    stage('Switch over to new Version') {
      steps{
        echo "Switching Production application to ${destApp}."
        script {
          openshift.withCluster() {
            openshift.withProject("${prodProject}") {
              def route = openshift.selector("route/tasks").object()
              route.spec.to.name="${destApp}"
              openshift.apply(route)
              sleep 5
            }
          }
        }
      }
    }
  }
}
